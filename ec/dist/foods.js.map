{"version":3,"file":"foods.js","mappings":"mBAiBE,MAAMA,EAWJ,cAAwB,CATpBC,iBAEF,OADcC,EAAMC,cACPC,oBAAoBC,QAAO,CAACC,EAAOC,IAAUD,EAAQC,GAAO,EAC3E,CACAC,SACEC,SAASC,cAAc,kBAAmBC,YAAcC,OAAOC,KAAKZ,WACtE,CAKAa,qBAIE,OAHKd,EAAMe,WACTf,EAAMe,SAAW,IAAIf,GAEhBA,EAAMe,QACf,EAEF,MAAMC,EACJC,YAAmBC,GAAA,KAAAA,QAAAA,EACjBA,EAAQC,iBAAiB,QAASN,KAAKO,kBAAkBC,KAAKR,MAChE,CACAO,oBACEP,KAAKK,QAAQI,UAAUC,OAAO,gBAChBvB,EAAMG,cACdK,QACR,EAEF,MAAMN,EAwBJ,cAtBA,KAAAsB,SAAWf,SAASgB,iBAAiC,SAC7C,KAAAC,gBAAoC,GACpC,KAAAC,qBAAiC,GAqBvCd,KAAKW,SAASI,SAAQV,IACpB,IAAIF,EAAKE,EAAQ,GAErB,CAvBIW,qBAOF,OANAhB,KAAKa,gBAAkB,GACvBb,KAAKW,SAASI,SAAQV,IAChBA,EAAQI,UAAUQ,SAAS,iBAC7BjB,KAAKa,gBAAgBK,KAAKb,E,IAGvBL,KAAKa,eACd,CACItB,0BAQF,OAPAS,KAAKc,qBAAuB,GAC5Bd,KAAKgB,eAAeD,SAAQV,IAC1B,MAAMc,EAAYd,EAAQR,cAAc,gBACpCsB,GACFnB,KAAKc,qBAAqBI,KAAKE,OAAOD,EAAUrB,a,IAG7CE,KAAKc,oBACd,CAOAb,qBAIE,OAHKZ,EAAMa,WACTb,EAAMa,SAAW,IAAIb,GAEhBA,EAAMa,QACf,EAEYb,EAAMC,a","sources":["webpack://ts-sass/./src/ts/food-app.ts"],"sourcesContent":["interface Scoreable {\n    readonly totalScore: number;\n    // 戻り値がない\n    render(): void;\n  }\n  interface Foodable {\n    element: HTMLDivElement;\n    // 戻り値がない\n    clickEventHandler(): void;\n  }\n  interface Foodsable {\n    // htmlのdom\n    elements: NodeListOf<HTMLDivElement>;\n    readonly activeElements: HTMLDivElement[];\n    readonly activeElementsScore: number[];\n  }\n  \n  class Score implements Scoreable {\n    private static instance: Score;\n    get totalScore() {\n      const foods = Foods.getInstance();\n      return foods.activeElementsScore.reduce((total, score) => total + score, 0)\n    }\n    render() {\n      document.querySelector('.score__number')!.textContent = String(this.totalScore);\n    }\n\n    // シングルトーンパターン形成時に必要のため\n    private constructor() { }\n    // シングルトーンパターン生成\n    static getInstance() {\n      if (!Score.instance) {\n        Score.instance = new Score();\n      }\n      return Score.instance;\n    }\n  }\n  class Food implements Foodable {\n    constructor(public element: HTMLDivElement) {\n      element.addEventListener('click', this.clickEventHandler.bind(this));\n    }\n    clickEventHandler() {\n      this.element.classList.toggle('food--active');\n      const score = Score.getInstance();\n      score.render();\n    }\n  }\n  class Foods implements Foodsable {\n    private static instance: Foods;\n    elements = document.querySelectorAll<HTMLDivElement>('.food');\n    private _activeElements: HTMLDivElement[] = [];\n    private _activeElementsScore: number[] = [];\n    get activeElements() {\n      this._activeElements = [];\n      this.elements.forEach(element => {\n        if (element.classList.contains('food--active')) {\n          this._activeElements.push(element);\n        }\n      })\n      return this._activeElements;\n    }\n    get activeElementsScore() {\n      this._activeElementsScore = [];\n      this.activeElements.forEach(element => {\n        const foodScore = element.querySelector('.food__score');\n        if (foodScore) {\n          this._activeElementsScore.push(Number(foodScore.textContent));\n        }\n      })\n      return this._activeElementsScore;\n    }\n    private constructor() {\n      this.elements.forEach(element => {\n        new Food(element);\n      })\n    }\n    // シングルトーンパターン生成\n    static getInstance() {\n      if (!Foods.instance) {\n        Foods.instance = new Foods();\n      }\n      return Foods.instance;\n    }\n  }\n  const foods = Foods.getInstance();"],"names":["Score","totalScore","Foods","getInstance","activeElementsScore","reduce","total","score","render","document","querySelector","textContent","String","this","static","instance","Food","constructor","element","addEventListener","clickEventHandler","bind","classList","toggle","elements","querySelectorAll","_activeElements","_activeElementsScore","forEach","activeElements","contains","push","foodScore","Number"],"sourceRoot":""}